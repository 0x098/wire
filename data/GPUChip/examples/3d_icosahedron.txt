// Author: Drunkie
// Description: Draws a 3D icosahedron model (solid and wireframe)

Main();

#include <drivers\drv_gl.txt>

void Main()
{
    glSleep( 40 ); // Sleep for 40 milliseconds (Reduces fps lag)
    glClear( 0, 0, 0 ); // Clear screen
    
    glFontSize( 20 ); // Set font size
    glColor( 255, 255, 255 ); // Set draw color
    glWriteString( 2, 2, "FPS:" ); // Write a string to GPU screen
    
    glColor( 0, 255, 0 ); // Set draw color
    glWriteInt( 56, 3, glFPS() ); // Write the fps
    
    glCoordPipe( 3 ); // Set coordinate pipe
    glVertexPipe( 5 ); // Set vertex pipe

    glLightPos( 0, 0, -50 ); // Set the light position
    glLightColor( 255, 255, 255, 1 ); // Set the light color
    
    // Sets the camera's pos, target and up vector
    glLookAtPos( 0, 0, -2.25 );
    glLookAtTarget( 0, 0, 0 );
    glLookAtUp( 0, 1, 0 ); 
    
    // Rotate the model
    timer #vRotate.w;    
   
    // Create our matrices
    glLookAt( mViewMatrix );
    glPerspective( mProjectionMatrix, vPerspective );
    glRotateMatrix( mRotateMatrix, vRotate );
    glTranslateMatrix( mTranslateMatrix, vTranslate );
    glScaleMatrix( mScaleMatrix, vScale );
    
    // Perform matrix transformations
    glModelMatrix( mModelMatrix, mTranslateMatrix, mRotateMatrix, mScaleMatrix );
    glModelViewMatrix( mModelViewMatrix, mModelMatrix, mViewMatrix );
    
    // Load our model view and projection natrices
    glLoadMatrix( mModelViewMatrix );
    glLoadProjection( mProjectionMatrix );
    
    // Enable parameters
    glEnable( 0 );
    glEnable( 1 );
    glEnable( 2 );
    glEnable( 3 );
    
    // Wireframe 3D polygon
    glLineWidth( 2 ); // Set line width of wireframe
    glFillMode( FILLMODE_WIREFRAME ); // Enable wireframe
    glColor4( 255, 255, 255, 255 ); // Set the draw color
    glPoly3D( IcosahedronModel, 20 ); // Draw 3D polygon
    
    // Solid 3D polygon
    glDisable( 3 );
    glFillMode( FILLMODE_SOLID); // Set fillmode as solid
    glColor4( 100, 149, 237, 180 ); // Set draw color
    glPoly3D( IcosahedronModel, 20 ); // Draw 3D polygon 
    
    glFlush(); // Flush the vertex buffer to the screen
    glExit(); // Exit
}

// The vertex data for our model
IcosahedronModel:
db 0,0,1; db 0,0.9,0.5; db 0.9,0.3,0.4;
db 0,0,1; db -0.9,0.3,0.4; db 0,0.9,0.5;
db 0,0,1; db -0.5,-0.7,0.4; db -0.9,0.3,0.4;
db 0,0,1; db 0.5,-0.7,0.4; db -0.5,-0.7,0.4;
db 0,0,1; db 0.9,0.3,0.4; db 0.5,-0.7,0.4;
db 0.9,-0.3,-0.4; db 0.9,0.3,0.4; db 0.5,0.7,-0.4;
db 0,0.9,0.5; db 0.5,0.7,-0.4; db 0.9,0.3,0.4;
db 0,0.9,0.5; db -0.5,0.7,-0.4; db 0.5,0.7,-0.4;
db 0,0.9,0.5; db -0.9,0.3,0.4; db -0.5,0.7,-0.4;
db -0.9,-0.3,-0.4; db -0.5,0.7,-0.4; db -0.9,0.3,0.4;
db -0.9,-0.3,-0.4; db -0.9,0.3,0.4; db -0.5,-0.7,0.4;
db -0.9,-0.3,-0.4; db -0.5,-0.7,0.4; db 0,-0.9,-0.5;
db 0.5,-0.7,0.4; db 0,-0.9,-0.5; db -0.5,-0.7,0.4;
db 0.5,-0.7,0.4; db 0.9,-0.3,-0.4; db 0,-0.9,-0.5;
db 0.5,-0.7,0.4; db 0.9,0.3,0.4; db 0.9,-0.3,-0.4;
db 0,0,-1; db 0,-0.9,-0.5; db 0.9,-0.3,-0.4;
db 0,0,-1; db 0.9,-0.3,-0.4; db 0.5,0.7,-0.4;
db 0,0,-1; db 0.5,0.7,-0.4 db -0.5,0.7,-0.4;
db 0,0,-1; db -0.5,0.7,-0.4; db -0.9,-0.3,-0.4;
db 0,0,-1; db -0.9,-0.3,-0.4; db 0,-0.9,-0.5;

matrix mRotateMatrix;
matrix mTranslateMatrix;
matrix mScaleMatrix;
matrix mProjectionMatrix;
matrix mViewMatrix;
matrix mModelMatrix;
matrix mModelViewMatrix;

vec4f vRotate,      1,  1,  0,  1; // <AXIS X Y Z> <ANGLE W>
vec4f vTranslate,   0,  0,  0,  0; // <TRANSLATION X Y Z> <0>
vec4f vPerspective, 30, 1,  1,  20; // <FOV> <ASPECT RATIO> <ZNEAR> <ZFAR>
vec4f vScale,       1,  1,  1,  0; // <SCALE X Y Z> <0>
