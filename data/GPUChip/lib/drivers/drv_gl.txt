// Author: Drunkie
// Description: A graphics library for rendering in 2D and 3D


// Clear functions
void glClear( float r, float g, float b )
{
    mov #__BG.r,r; mov #__BG.g,g; mov #__BG.b,b; mov #__BG.a,255;
    dclrscr __BG;
}
void glClear4( float r, float g, float b, float a )
{
    mov #__BG.r,r; mov #__BG.g,g; mov #__BG.b,b; mov #__BG.a,a;
    dclrscr __BG;
}
void glClearTexture()
{
    dclrtex;
}

// Pipeline functions
void glCoordPipe( float coordpipe )
{
    dcpipe coordpipe;
}
void glVertexPipe( float vertexpipe )
{
    dvxpipe vertexpipe;
}

// Frame functions
void glSleep( float milliseconds )
{
    timer #__CURTIME; 
    sub #__CURTIME,#__TIMESTAMP;
    if (*__CURTIME <= milliseconds / 1000) {
        mov #regHWClear,0;
        jmp glExit;
    }
    timer #__TIMESTAMP;   
}
void glExit()
{
    dexit;
}

// Color setters
void glColor( float r, float g, float b )
{
    mov #__FG.r,r; mov #__FG.g,g; mov #__FG.b,b; mov #__FG.a,255;
    dcolor __FG;
}
void glColor4( float r, float g, float b, float a )
{
    mov #__FG.r,r; mov #__FG.g,g; mov #__FG.b,b; mov #__FG.a,a;
    dcolor __FG;
}

// Texture setters
void glBindTexture( char* texturename )
{
    dxtexture texturename;
}
void glTexture( float texid )
{
    dtexture texid;
}

// Offset functions
void glOffset( float offx, float offy )
{
    mov #__V1.x,offx; mov #__V1.y,offy;
    dmove __V1;
}
float glOffsetX()
{
    return *regOffsetX;
}
float glOffsetY()
{
    return *regOffsetY;
}

// Label setters
void glReset( float num )
{
    mov #regReset,num;
}
void glHWClear( float num )
{
    mov #regHWClear,num;
}
void glVertexMode( float num )
{
    mov #regVertexMode,num;
}
void glHalt( float num )
{
    mov #regHalt,num;
}
void glRAMReset( float num )
{
    mov #regRAMReset,num;
}
void glAsyncReset( float num )
{
    mov #regAsyncReset,num;
}
void glAsyncClk( float num )
{
    mov #regAsyncClk,num;
}
void glAsyncFreq( float num )
{
    mov #regAsyncFreq,num;
}
float glIndex()
{
    return *regIndex;
}
void glHScale( float num )
{
    mov #regHScale,num;
}
void glVScale( float num )
{
    mov #regVScale,num;
}
void glHWScale( float num )
{
    mov #regHWScale,num;
}
void glRotation( float num )
{
    mov #regRotation,num;
}
void glTextureSize( float num )
{
    mov #regTexSize,num;
}
void glTextureDataPtr( float num )
{
    mov #regTexDataPtr,num;
}
void glTextureDataSize( float num )
{
    mov #regTexDataSz,num;
}
void glRasterQuality( float num )
{
    mov #regRasterQ,num;
}
void glTextureBuffer( float num )
{
    mov #regTexBuffer,num;
}
float glWidth()
{
    return *regWidth;
}
float glHeight()
{
    return *regHeight;
}
float glRatio()
{
    return *regRatio;
}
float glParamList()
{
    return *regParamList;
}
float glCursorX()
{
    return *regCursorX;
}
float glCursorY()
{
    return *regCursorY;
}
void glCursor( float num )
{
    mov #regCursor,num;
}
void glCursorButtons( float num )
{
    mov #regCursorButtons,num;
}
void glBrightnessW( float num )
{
    mov #regBrightnessW,num;
}
void glBrightnessR( float num )
{
    mov #regBrightnessR,num;
}
void glBrightnessG( float num )
{
    mov #regBrightnessG,num;
}
void glBrightnessB( float num )
{
    mov #regBrightnessB,num;
}
void glContrastW( float num )
{
    mov #regContrastW,num;
}
void glContrastR( float num )
{
    mov #regContrastR,num;
}
void glContrastG( float num )
{
    mov #regContrastG,num;
}
void glContrastB( float num )
{
    mov #regContrastB,num;
}
void glCircleQuality( float num )
{
    mov #regCircleQuality,num;
}
void glScale( float num )
{
    mov #regScale,num;
}
void glCenterX( float num )
{
    mov #regCenterX,num;
}
void glCenterY( float num )
{
    mov #regCenterY,num;
}
void glCircleStart( float num )
{
    mov #regCircleStart,num;
}
void glCircleEnd( float num )
{
    mov #regCircleEnd,num;
}
void glScaleX( float num )
{
    mov #regScaleX,num;
}
void glScaleY( float num )
{
    mov #regScaleY,num;
}
void glFontAlign( float num )
{
    mov #regFontAlign,num;
}
void glFontHAlign( float num )
{
    mov #regFontHalign,num;
}
void glFontVAlign( float num )
{
    mov #regFontValign,num;
}
void glZOffset( float num )
{
    mov #regZOffset,num;
}
void glCullDistance( float num )
{
    mov #regCullDistance,num;
}
void glCullMode( float num )
{
    mov #regCullMode,num;
}
void glLightMode( float num )
{
    mov #regLightMode,num;
}
void glVertexArray( float num )
{
    mov #regVertexArray,num;
}
void glTextureRotation( float num )
{
    mov #regTexRotation,num;
}
void glTextureScale( float num )
{
    mov #regTexScale,num;
}
void glTextureCenterU( float num )
{
    mov #regTexCenterU,num;
}
void glTextureCenterV( float num )
{
    mov #regTexCenterV,num;
}
void glTextureOffsetU( float num )
{
    mov #regTexOffsetU,num;
}
void glTextureOffsetV( float num )
{
    mov #regTexOffsetV,num;
}

// 2D graphics functions
void glCircle( float posx, float posy, float radius, float quality )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #regCircleQuality,quality;
    dcircle __V1,radius;
}
void glRect( float posx, float posy, float destx, float desty )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #__V2.x,destx; mov #__V2.y,desty;
    drect __V1,__V2;
}
void glRectWH( float posx, float posy, float sizex, float sizey )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #__V2.x,sizex; mov #__V2.y,sizey;
    drectwh __V1,__V2;
}
void glORect( float posx, float posy, float destx, float desty )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #__V2.x,destx; mov #__V2.y,desty;
    dorect __V1,__V2;
}
void glORectWH( float posx, float posy, float sizex, float sizey )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #__V2.x,sizex; mov #__V2.y,sizey;
    dorectwh __V1,__V2;
}
void glPixel( float posx, float posy )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    dpixel __V1,__FG;
}
void glLine( float posx, float posy, float destx, float desty )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    mov #__V2.x,destx; mov #__V2.y,desty;
    dline __V1,__V2;
}
void glPoly2D( float* vertexdata, float vertexcount )
{
    dvxdata_2f vertexdata,vertexcount;
}
void glLineWidth( float linewidth )
{
    dsetwidth linewidth;
}

// Font functions
void glFont( float fontid )
{
    dsetfont fontid;
}
void glFontSize( float fontsize )
{
    dsetsize fontsize;
}

// Text functions
float glTextWidth( char* text )
{
    float width;
    dtextwidth *width,text;
    return width;
}
float glTextHeight( char* text )
{
    float height;
    dtextheight *height,text;
    return height;
}
void glWriteString( float posx, float posy, char* text )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    dwrite __V1,text;
}
void glWriteFloat( float posx, float posy, float num )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    dwritef __V1,num;
}
void glWriteInt( float posx, float posy, float num )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    dwritei __V1,num;
}
void glWriteFmt( float posx, float posy, char* text )
{
    mov #__V1.x,posx; mov #__V1.y,posy;
    dwritefmt __V1,text;
}

// 3D graphics functions
void glPoly3D( float* vertexbuffer, float vertexcount )
{
    if (*__FILLMODE == 0)
        dvxdata_3f vertexbuffer,vertexcount;
    else if (*__FILLMODE == 1)
        dvxdata_3f_wf vertexbuffer,vertexcount;
}
void glFlush()
{
    dvxflush;
}
void glEnable( float num )
{
    denable num;
}
void glDisable( float num )
{
    ddisable num;
}
void glLightPos( float x, float y, float z )
{
    mov #__LIGHTPOS.x,x; mov #__LIGHTPOS.y,y; mov #__LIGHTPOS.z,z;
    dsetlight 0,__LIGHTDATA;
}
void glLightColor( float r, float g, float b, float brightness )
{
    mov #__LIGHTCOL.r,r; mov #__LIGHTCOL.g,g; mov #__LIGHTCOL.b,b; mov #__LIGHTCOL.a,brightness;
    dsetlight 0,__LIGHTDATA;
}
void glFillMode( float fmode )
{
    mov #__FILLMODE,fmode;
}

// 3d matrix functions
void glLookAt( float* mViewMatrix )
{
    mlookat mViewMatrix,__VLOOKAT;
}
void glLookAtPos( float x, float y, float z )
{
    mov #__VLOOKAT_POS.x,x; mov #__VLOOKAT_POS.y,y; mov #__VLOOKAT_POS.z,z;
}
void glLookAtTarget( float x, float y, float z )
{
    mov #__VLOOKAT_TARG.x,x; mov #__VLOOKAT_TARG.y,y; mov #__VLOOKAT_TARG.z,z;
}
void glLookAtUp( float x, float y, float z )
{
    mov #__VLOOKAT_UP.x,x; mov #__VLOOKAT_UP.y,y; mov #__VLOOKAT_UP.z,z;
}
void glPerspective( float* mProjectionMatrix, float* vPerspective )
{
    mperspective mProjectionMatrix,vPerspective; 
}
void glRotateMatrix( float* mRotateMatrix, float* vRotate )
{
    mrotate mRotateMatrix,vRotate;
}
void glTranslateMatrix( float* mTranslateMatrix, float* vTranslate )
{
    mtranslate mTranslateMatrix,vTranslate; 
}
void glScaleMatrix( float* mScaleMatrix, float* vScale )
{
    mscale mScaleMatrix,vScale;
}
void glLoadMatrix( float* mModelViewMatrix )
{
    mload mModelViewMatrix;
}
void glLoadProjection( float* mProjectionMatrix )
{
    mloadproj mProjectionMatrix;
}
void glModelMatrix( float* mModelMatrix, float* mTranslateMatrix, float* mRotateMatrix, float* mScaleMatrix )
{
    mmov mModelMatrix,mTranslateMatrix;
    mmul mModelMatrix,mRotateMatrix;
    mmul mModelMatrix,mScaleMatrix;
}
void glModelViewMatrix( float* mModelViewMatrix, float* mModelMatrix, float* mViewMatrix )
{
    mmov mModelViewMatrix,mViewMatrix;
    mmul mModelViewMatrix,mModelMatrix;
}

// Front/back buffer functions
void glSetFrontBuffer()
{
    dsetbuf_fbo;
}
void glSetBackBuffer()
{
    dsetbuf_spr;
}
void glSetVertexBuffer()
{
    dsetbuf_vx;
}
void glSwap()
{
    dswap;
}

// Misc functions
float glFPS()
{
    float fps;
    dt fps;
    finv fps;
    fint fps;
    return fps;
}
void glEntryPoint( float idx, float ptr )
{
    dentrypoint idx,ptr;
}
void glBegin()
{
    dbegin;
}
void glEnd()
{
    dend;
}

// Global-scope variables
color __FG;
color __BG;
vec4f __V1;
vec4f __V2;

alloc __TIMESTAMP;
alloc __CURTIME;

alloc __FILLMODE;
define FILLMODE_SOLID,0;
define FILLMODE_WIREFRAME,1;

__LIGHTDATA:
vec4f __LIGHTPOS,0,0,-5;
color __LIGHTCOL,255,255,255,1;

__VLOOKAT:
vec3f __VLOOKAT_POS,0,0,-5;
vec3f __VLOOKAT_TARG,0,0,0;
vec3f __VLOOKAT_UP,0,1,0;
