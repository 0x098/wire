//Universal device host driver

#define UDH_DRIVER
#define MAX_DEVICES 32
#define MAX_ADDRESS_RANGE 2048

//Device name/string data
string udhDeviceString0,"None";
string udhDeviceString1,"Unknown";
string udhDeviceString2,"Extended bus";
string udhDeviceString3,"Address bus";
string udhDeviceString4,"Zyelios CPU";
string udhDeviceString5,"Zyelios GPU";
string udhDeviceString6,"Zyelios SPU";
string udhDeviceString7,"Flash EEPROM";
string udhDeviceString8,"ROM";
string udhDeviceString9,"Data bus";
string udhDeviceString10,"CD Ray";
string udhDeviceString11,"Console screen";
string udhDeviceString12,"Digital screen";
string udhDeviceString13,"Data plug";
string udhDeviceString14,"Data socket";
string udhDeviceString15,"Keyboard";
string udhDeviceString16,"Oscilloscope";
string udhDeviceString17,"Sound emitter";
string udhDeviceString18,"Constant value";
string udhDeviceString19,"Data port";
string udhDeviceString20,"RAM";
udhDeviceName: 
  db udhDeviceString0, udhDeviceString1, udhDeviceString2;
  db udhDeviceString3, udhDeviceString4, udhDeviceString5;
  db udhDeviceString6, udhDeviceString7, udhDeviceString8;
  db udhDeviceString9, udhDeviceString10,udhDeviceString11;
  db udhDeviceString12,udhDeviceString13,udhDeviceString14;
  db udhDeviceString15,udhDeviceString16,udhDeviceString17;
  db udhDeviceString18,udhDeviceString19,udhDeviceString20;

//Extended bus offset
char* udhBusOffset;

float udhSetBusAddress(char* extOffset) {
  udhBusOffset = extOffset;
  udhQueryDevices();
}

void udhQueryDevices() {
  float i;

  //Run the query
  udhBusOffset[16] = 32+MAX_DEVICES;
  udhBusOffset[17] = 1;  

  //Reconfigure all devices
  //FIXME: only supports single extended bus right now
  for (i = 0; i < 8; i++) {
    udhBusOffset[i*2+0] = MAX_ADDRESS_RANGE*i;
    udhBusOffset[i*2+1] = MAX_ADDRESS_RANGE*i+(MAX_ADDRESS_RANGE-1);
  }
}

float udhGetDeviceType(float busIndex) {
  return udhBusOffset[32+busIndex];
}

float udhGetDeviceOffset(float busIndex) {
  return 65536+32+MAX_DEVICES+udhBusOffset[busIndex*2];
}

char* udhGetDeviceName(float busIndex) {
  float deviceType = udhGetDeviceType(busIndex);
  if ((deviceType >= 0) && (deviceType <= 20)) {
    return udhDeviceName[deviceType];  
  } else {
    return udhDeviceName[1];
  }
}

float udhGetNumDevices() {
  return MAX_DEVICES;   
}

float udhGetDevices(float type, float maxCount, char* deviceList) {
  float i,devPtr,n;
  
  devPtr = deviceList;
  n = 0;
  for (i = 0; i < MAX_DEVICES; i++) {
    if ((udhGetDeviceType(i) == type) && (n < maxCount)) {
      n++;
      *devPtr++ = i; 
    }
  }

  return n;
}
